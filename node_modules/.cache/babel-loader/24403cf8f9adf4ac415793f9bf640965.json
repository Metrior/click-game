{"ast":null,"code":"export const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\nexport const SET_EASY_MODE = 'SET_EASY_MODE';\nexport const SET_NORMAL_MODE = 'SET_NORMAL_MODE';\nexport const SET_HARD_MODE = 'SET_HARD_MODE';\nexport const START_GAME = 'START_GAME';\nexport const CREATE_GRID = 'CREATE_GRID';\nexport const CHOOSE_RANDOM_ELEMENT = 'CHOOSE_RANDOM_ELEMENT';\nexport const CHANGE_COLOR_TO_GREEN = 'CHANGE_COLOR_TO_GREEN';\nexport const CHANGE_COLOR_TO_RED = 'CHANGE_COLOR_TO_RED';\nexport const PLAYER_SCORE = 'PLAYER_SCORE';\nexport const COMPUTER_SCORE = 'COMPUTER_SCORE';\nexport const PLAYER_WINS = 'PLAYER_WINS';\nexport const COMPUTER_WINS = 'COMPUTER_WINS';\nexport const setSettings = mode => {\n  return async (dispatch, getState) => {\n    const {\n      sideSize\n    } = getState();\n    await dispatch(setMode(mode));\n    await dispatch(createArray(sideSize));\n  };\n};\nexport const setPlayerName = name => {\n  return {\n    type: SET_PLAYER_NAME,\n    payload: name\n  };\n};\nexport const setMode = mode => {\n  if (mode === 'easy Mode') {\n    return {\n      type: SET_EASY_MODE,\n      payload: {\n        mode: 'easy Mode',\n        sideSize: 5,\n        delay: 2000\n      }\n    };\n  } else if (mode === 'normal Mode') {\n    return {\n      type: SET_NORMAL_MODE,\n      payload: {\n        mode: 'normal Mode',\n        sideSize: 10,\n        delay: 1000\n      }\n    };\n  } else if (mode === 'hard Mode') {\n    return {\n      type: SET_HARD_MODE,\n      payload: {\n        mode: 'hard Mode',\n        sideSize: 15,\n        delay: 900\n      }\n    };\n  }\n};\nexport const runGame = () => {\n  return (dispatch, getState) => {\n    const {\n      array,\n      chosenElements\n    } = getState().game;\n    dispatch(startGame());\n    dispatch(chooseRandom(array, chosenElements));\n  };\n};\nexport const startGame = () => {\n  return {\n    type: START_GAME\n  };\n};\nexport const createArray = gridSide => {\n  let newArray = [];\n\n  while (newArray.length < gridSide * gridSide) {\n    newArray.push(\"white\");\n  }\n\n  console.log(newArray);\n  return {\n    type: CREATE_GRID,\n    array: newArray\n  };\n};\nexport const chooseRandom = (array, chosenElements) => {\n  let elementId = Math.floor(Math.random() * array.length);\n\n  if (chosenElements.includes(elementId)) {\n    chooseRandom(array, chosenElements);\n  } else {\n    return {\n      type: CHOOSE_RANDOM_ELEMENT,\n      elementId: elementId\n    };\n  }\n};\nexport const submitColorChange = color => {\n  return (dispatch, getState) => {\n    const {\n      playerScore,\n      computerScore,\n      array,\n      chosenElements,\n      winner\n    } = getState().game;\n    const {\n      name\n    } = getState().settings;\n    dispatch(changeBlockColor(color));\n    dispatch(calculateScore(color));\n    dispatch(checkWinner(playerScore, computerScore, array, name));\n\n    if (!winner) {\n      dispatch(chooseRandom(array, chosenElements));\n    }\n  };\n};\nexport const changeBlockColor = (color, elementId) => {\n  if (color === \"green\") {\n    return {\n      type: CHANGE_COLOR_TO_GREEN,\n      color: color\n    };\n  } else if (color === \"red\") {\n    return {\n      type: CHANGE_COLOR_TO_RED,\n      color: color\n    };\n  }\n};\nexport const calculateScore = color => {\n  if (color === \"green\") {\n    return {\n      type: PLAYER_SCORE\n    };\n  } else if (color === \"red\") {\n    return {\n      type: COMPUTER_SCORE\n    };\n  }\n};\nexport const checkWinner = (playerScore, computerScore, array, name) => {\n  if (playerScore >= Math.ceil(array.length / 2)) {\n    return {\n      type: PLAYER_WINS,\n      payload: name\n    };\n  } else if (computerScore >= Math.ceil(array.length / 2)) {\n    return {\n      type: COMPUTER_WINS\n    };\n  }\n};","map":{"version":3,"sources":["/Users/zoyamilovanova/WebstormProjects/clickGame/src/redux/actions/index.js"],"names":["SET_PLAYER_NAME","SET_EASY_MODE","SET_NORMAL_MODE","SET_HARD_MODE","START_GAME","CREATE_GRID","CHOOSE_RANDOM_ELEMENT","CHANGE_COLOR_TO_GREEN","CHANGE_COLOR_TO_RED","PLAYER_SCORE","COMPUTER_SCORE","PLAYER_WINS","COMPUTER_WINS","setSettings","mode","dispatch","getState","sideSize","setMode","createArray","setPlayerName","name","type","payload","delay","runGame","array","chosenElements","game","startGame","chooseRandom","gridSide","newArray","length","push","console","log","elementId","Math","floor","random","includes","submitColorChange","color","playerScore","computerScore","winner","settings","changeBlockColor","calculateScore","checkWinner","ceil"],"mappings":"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","sourcesContent":["export const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\nexport const SET_EASY_MODE = 'SET_EASY_MODE';\nexport const SET_NORMAL_MODE = 'SET_NORMAL_MODE';\nexport const SET_HARD_MODE = 'SET_HARD_MODE';\nexport const START_GAME = 'START_GAME';\nexport const CREATE_GRID = 'CREATE_GRID';\nexport const CHOOSE_RANDOM_ELEMENT = 'CHOOSE_RANDOM_ELEMENT';\nexport const CHANGE_COLOR_TO_GREEN = 'CHANGE_COLOR_TO_GREEN';\nexport const CHANGE_COLOR_TO_RED = 'CHANGE_COLOR_TO_RED';\nexport const PLAYER_SCORE = 'PLAYER_SCORE';\nexport const COMPUTER_SCORE = 'COMPUTER_SCORE';\nexport const PLAYER_WINS = 'PLAYER_WINS';\nexport const COMPUTER_WINS = 'COMPUTER_WINS';\n\nexport const setSettings = (mode) => {\n    return async (dispatch, getState) => {\n        const {sideSize} = getState();\n        await dispatch(setMode(mode))\n        await dispatch(createArray(sideSize))\n    }\n};\n\nexport const setPlayerName = (name) => {\n    return {\n        type: SET_PLAYER_NAME,\n        payload: name\n    }\n};\n\nexport const setMode = (mode) => {\n    if (mode==='easy Mode') {\n        return {\n            type: SET_EASY_MODE,\n            payload: {\n                mode: 'easy Mode',\n                sideSize: 5,\n                delay: 2000,\n            }\n        }\n    } else if (mode==='normal Mode') {\n        return {\n            type: SET_NORMAL_MODE,\n            payload: {\n                mode: 'normal Mode',\n                sideSize: 10,\n                delay: 1000,\n            }\n        }\n    } else if (mode==='hard Mode') {\n        return {\n            type: SET_HARD_MODE,\n            payload: {\n                mode: 'hard Mode',\n                sideSize: 15,\n                delay: 900,\n            }\n        }\n    }\n};\n\nexport const runGame = () => {\n    return (dispatch, getState) => {\n        const {array, chosenElements} = getState().game;\n        dispatch(startGame())\n        dispatch(chooseRandom(array, chosenElements))\n    }\n};\n\nexport const startGame = () => {\n    return {\n        type: START_GAME,\n    }\n};\n\nexport const createArray = (gridSide) => {\n    let newArray = []\n    while (newArray.length<gridSide*gridSide) {\n        newArray.push(\"white\")\n    }\n    console.log(newArray)\n    return {\n        type: CREATE_GRID,\n        array: newArray\n    }\n}\n\nexport const chooseRandom = (array, chosenElements) => {\n    let elementId = Math.floor(Math.random() * array.length);\n    if (chosenElements.includes(elementId)){\n        chooseRandom(array, chosenElements)\n    } else {\n        return {\n            type: CHOOSE_RANDOM_ELEMENT,\n            elementId: elementId\n        }\n    }\n}\n\nexport const submitColorChange = (color) => {\n    return (dispatch, getState) => {\n        const {playerScore, computerScore, array, chosenElements, winner} = getState().game;\n        const {name} = getState().settings;\n        dispatch(changeBlockColor(color))\n        dispatch(calculateScore(color))\n        dispatch(checkWinner(playerScore, computerScore, array, name))\n        if (!winner){\n            dispatch(chooseRandom(array, chosenElements))\n        }\n    }\n}\n\nexport const changeBlockColor = (color, elementId) => {\n    if (color===\"green\"){\n        return {\n            type: CHANGE_COLOR_TO_GREEN,\n            color: color\n        }\n    } else if (color===\"red\"){\n        return {\n            type: CHANGE_COLOR_TO_RED,\n            color: color\n        }\n    }\n};\n\nexport const calculateScore = (color) => {\n    if (color===\"green\"){\n        return {\n            type: PLAYER_SCORE\n        }\n    } else if (color===\"red\"){\n        return {\n            type: COMPUTER_SCORE\n        }\n    }\n}\n\nexport const checkWinner = (playerScore, computerScore, array, name) => {\n    if (playerScore>=(Math.ceil(array.length/2))){\n        return {\n            type: PLAYER_WINS,\n            payload: name\n        }\n    } else if (computerScore>=(Math.ceil(array.length/2))){\n        return {\n            type: COMPUTER_WINS\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}