{"ast":null,"code":"import { CHANGE_COLOR_TO_GREEN, CHANGE_COLOR_TO_RED, CHOOSE_RANDOM_ELEMENT, COMPUTER_SCORE, COMPUTER_WINS, NO_WINNER, CREATE_GRID, PLAYER_SCORE, PLAYER_WINS, START_GAME, CLEAR_WINNER } from \"../actions\";\nconst initialSettingsState = {\n  gameActive: false,\n  elementId: null,\n  chosenElements: [],\n  array: null,\n  playerScore: 0,\n  computerScore: 0,\n  winner: null,\n  winnersList: []\n};\n\nconst game = (state = initialSettingsState, action) => {\n  switch (action.type) {\n    case START_GAME:\n      return { ...state,\n        gameActive: true,\n        winner: null,\n        chosenElements: [],\n        playerScore: 0,\n        computerScore: 0\n      };\n\n    case CREATE_GRID:\n      return { ...state,\n        array: action.array\n      };\n\n    case CLEAR_WINNER:\n      return { ...state,\n        winner: null\n      };\n\n    case CHOOSE_RANDOM_ELEMENT:\n      return { ...state,\n        chosenElements: [...state.chosenElements, action.elementId],\n        array: state.array.map((element, i) => i === action.elementId ? \"blue\" : element),\n        elementId: action.elementId\n      };\n\n    case CHANGE_COLOR_TO_GREEN:\n      return { ...state,\n        array: state.array.map((element, i) => i === state.elementId ? \"green\" : element)\n      };\n\n    case CHANGE_COLOR_TO_RED:\n      return { ...state,\n        array: state.array.map((element, i) => i === state.elementId ? \"red\" : element)\n      };\n\n    case PLAYER_SCORE:\n      return { ...state,\n        playerScore: state.playerScore + 1\n      };\n\n    case COMPUTER_SCORE:\n      return { ...state,\n        computerScore: state.computerScore + 1\n      };\n\n    case PLAYER_WINS:\n      return { ...state,\n        winner: \"player\",\n        winnersList: [...state.winnersList, action.winner],\n        gameActive: false,\n        array: state.array.map(() => \"white\")\n      };\n\n    case COMPUTER_WINS:\n      return { ...state,\n        winner: \"computer\",\n        gameActive: false,\n        array: state.array.map(() => \"white\")\n      };\n\n    case NO_WINNER:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default game;","map":{"version":3,"sources":["/Users/zoyamilovanova/WebstormProjects/clickGame/src/redux/reducers/game.js"],"names":["CHANGE_COLOR_TO_GREEN","CHANGE_COLOR_TO_RED","CHOOSE_RANDOM_ELEMENT","COMPUTER_SCORE","COMPUTER_WINS","NO_WINNER","CREATE_GRID","PLAYER_SCORE","PLAYER_WINS","START_GAME","CLEAR_WINNER","initialSettingsState","gameActive","elementId","chosenElements","array","playerScore","computerScore","winner","winnersList","game","state","action","type","map","element","i"],"mappings":"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","sourcesContent":["import {\n    CHANGE_COLOR_TO_GREEN,\n    CHANGE_COLOR_TO_RED,\n    CHOOSE_RANDOM_ELEMENT,\n    COMPUTER_SCORE,\n    COMPUTER_WINS,\n    NO_WINNER,\n    CREATE_GRID,\n    PLAYER_SCORE,\n    PLAYER_WINS,\n    START_GAME, CLEAR_WINNER\n} from \"../actions\";\n\nconst initialSettingsState = {\n    gameActive: false,\n    elementId: null,\n    chosenElements: [],\n    array: null,\n    playerScore: 0,\n    computerScore: 0,\n    winner: null,\n    winnersList: []\n};\n\nconst game = (state = initialSettingsState, action) => {\n    switch (action.type) {\n        case START_GAME:\n            return {\n                ...state,\n                gameActive: true,\n                winner: null,\n                chosenElements: [],\n                playerScore: 0,\n                computerScore: 0\n            };\n        case CREATE_GRID:\n            return {\n                ...state,\n                array: action.array\n            }\n        case CLEAR_WINNER:\n            return {\n                ...state,\n                winner: null\n            }\n        case CHOOSE_RANDOM_ELEMENT:\n            return {\n                ...state,\n                chosenElements: [...state.chosenElements, action.elementId],\n                array: state.array.map((element, i) => i === action.elementId ?\n                    \"blue\" :\n                    element\n                ),\n                elementId: action.elementId\n            }\n        case CHANGE_COLOR_TO_GREEN:\n            return {\n                ...state,\n                array: state.array.map((element,i) => i === state.elementId ?\n                    \"green\" :\n                    element\n                )\n            }\n        case CHANGE_COLOR_TO_RED:\n            return {\n                ...state,\n                array: state.array.map((element,i) => i === state.elementId ?\n                    \"red\" :\n                    element\n                )\n            }\n        case PLAYER_SCORE:\n            return {\n                ...state,\n                playerScore: state.playerScore+1\n            }\n        case COMPUTER_SCORE:\n            return {\n                ...state,\n                computerScore: state.computerScore+1\n            }\n        case PLAYER_WINS:\n            return {\n                ...state,\n                winner: \"player\",\n                winnersList: [...state.winnersList, action.winner],\n                gameActive: false,\n                array: state.array.map(() => \"white\")\n            }\n        case COMPUTER_WINS:\n            return {\n                ...state,\n                winner: \"computer\",\n                gameActive: false,\n                array: state.array.map(() => \"white\")\n            }\n        case NO_WINNER:\n            return state\n        default:\n            return state\n    }\n};\n\n\n\nexport default game;\n"]},"metadata":{},"sourceType":"module"}