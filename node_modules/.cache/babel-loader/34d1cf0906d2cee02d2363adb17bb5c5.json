{"ast":null,"code":"export const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\nexport const SET_EASY_MODE = 'SET_EASY_MODE';\nexport const SET_NORMAL_MODE = 'SET_NORMAL_MODE';\nexport const SET_HARD_MODE = 'SET_HARD_MODE';\nexport const START_GAME = 'START_GAME';\nexport const CREATE_GRID = 'CREATE_GRID';\nexport const CHOOSE_RANDOM_ELEMENT = 'CHOOSE_RANDOM_ELEMENT';\nexport const CHANGE_COLOR_TO_GREEN = 'CHANGE_COLOR_TO_GREEN';\nexport const CHANGE_COLOR_TO_RED = 'CHANGE_COLOR_TO_RED';\nexport const PLAYER_SCORE = 'PLAYER_SCORE';\nexport const COMPUTER_SCORE = 'COMPUTER_SCORE';\nexport const PLAYER_WINS = 'PLAYER_WINS';\nexport const COMPUTER_WINS = 'COMPUTER_WINS';\nexport const NO_WINNER = 'NO_WINNER';\nexport const GET_WINNERS = 'GET_WINNERS';\nexport const setSettings = mode => {\n  return async (dispatch, getState) => {\n    await dispatch(setMode(mode));\n    const {\n      sideSize\n    } = getState().settings;\n    await dispatch(createArray(sideSize));\n  };\n};\nexport const setPlayerName = name => {\n  return {\n    type: SET_PLAYER_NAME,\n    payload: name\n  };\n};\nexport const setMode = mode => {\n  if (mode === 'easy Mode') {\n    return {\n      type: SET_EASY_MODE,\n      payload: {\n        mode: 'easy Mode',\n        sideSize: 5,\n        delay: 2000\n      }\n    };\n  } else if (mode === 'normal Mode') {\n    return {\n      type: SET_NORMAL_MODE,\n      payload: {\n        mode: 'normal Mode',\n        sideSize: 10,\n        delay: 1000\n      }\n    };\n  } else if (mode === 'hard Mode') {\n    return {\n      type: SET_HARD_MODE,\n      payload: {\n        mode: 'hard Mode',\n        sideSize: 15,\n        delay: 900\n      }\n    };\n  }\n};\nexport const runGame = () => {\n  return async (dispatch, getState) => {\n    await dispatch(startGame());\n    const {\n      array,\n      chosenElements\n    } = getState().game;\n    await dispatch(chooseRandom(array, chosenElements));\n  };\n};\nexport const startGame = () => {\n  return {\n    type: START_GAME\n  };\n};\nexport const createArray = gridSide => {\n  let newArray = [];\n\n  while (newArray.length < gridSide * gridSide) {\n    newArray.push(\"white\");\n  }\n\n  return {\n    type: CREATE_GRID,\n    array: newArray\n  };\n};\nexport const chooseRandom = (array, chosenElements) => {\n  let elementId = Math.floor(Math.random() * array.length);\n\n  if (chosenElements.includes(elementId)) {\n    return dispatch => {\n      dispatch(chooseRandom(array, chosenElements));\n    };\n  } else {\n    return {\n      type: CHOOSE_RANDOM_ELEMENT,\n      elementId: elementId\n    };\n  }\n};\nexport const submitColorChange = color => {\n  return async (dispatch, getState) => {\n    const {\n      name\n    } = getState().settings;\n    await dispatch(changeBlockColor(color));\n    await dispatch(calculateScore(color));\n    const {\n      playerScore,\n      computerScore,\n      array,\n      chosenElements\n    } = getState().game;\n    await dispatch(checkWinner(playerScore, computerScore, array, name));\n    const {\n      winner\n    } = getState().game;\n\n    if (!winner) {\n      await dispatch(chooseRandom(array, chosenElements));\n    }\n  };\n};\nexport const changeBlockColor = (color, elementId) => {\n  if (color === \"green\") {\n    return {\n      type: CHANGE_COLOR_TO_GREEN,\n      color: color\n    };\n  } else if (color === \"red\") {\n    return {\n      type: CHANGE_COLOR_TO_RED,\n      color: color\n    };\n  }\n};\nexport const calculateScore = color => {\n  if (color === \"green\") {\n    return {\n      type: PLAYER_SCORE\n    };\n  } else if (color === \"red\") {\n    return {\n      type: COMPUTER_SCORE\n    };\n  }\n};\nexport const checkWinner = (playerScore, computerScore, array, name) => {\n  if (playerScore >= Math.ceil(array.length / 2)) {\n    let today = new Date();\n    let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n    let date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    return {\n      type: PLAYER_WINS,\n      winner: {\n        name: name,\n        date: date,\n        time: time\n      }\n    };\n  } else if (computerScore >= Math.ceil(array.length / 2)) {\n    return {\n      type: COMPUTER_WINS\n    };\n  } else return {\n    type: NO_WINNER\n  };\n};\nexport const loadState = () => {\n  try {\n    const winners = localStorage.getItem('winners');\n\n    if (winners === null) {\n      return undefined;\n    }\n\n    console.log(\"s\");\n    return JSON.parse(winners);\n  } catch (err) {\n    return undefined;\n  }\n};\nexport const saveState = winners => {\n  try {\n    const winnersList = JSON.stringify(winners);\n    localStorage.setItem('winners', winnersList);\n  } catch {\n    return null;\n  }\n};","map":{"version":3,"sources":["/Users/zoyamilovanova/WebstormProjects/clickGame/src/redux/actions/index.js"],"names":["SET_PLAYER_NAME","SET_EASY_MODE","SET_NORMAL_MODE","SET_HARD_MODE","START_GAME","CREATE_GRID","CHOOSE_RANDOM_ELEMENT","CHANGE_COLOR_TO_GREEN","CHANGE_COLOR_TO_RED","PLAYER_SCORE","COMPUTER_SCORE","PLAYER_WINS","COMPUTER_WINS","NO_WINNER","GET_WINNERS","setSettings","mode","dispatch","getState","setMode","sideSize","settings","createArray","setPlayerName","name","type","payload","delay","runGame","startGame","array","chosenElements","game","chooseRandom","gridSide","newArray","length","push","elementId","Math","floor","random","includes","submitColorChange","color","changeBlockColor","calculateScore","playerScore","computerScore","checkWinner","winner","ceil","today","Date","time","getHours","getMinutes","getSeconds","date","getFullYear","getMonth","getDate","loadState","winners","localStorage","getItem","undefined","console","log","JSON","parse","err","saveState","winnersList","stringify","setItem"],"mappings":"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","sourcesContent":["export const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\nexport const SET_EASY_MODE = 'SET_EASY_MODE';\nexport const SET_NORMAL_MODE = 'SET_NORMAL_MODE';\nexport const SET_HARD_MODE = 'SET_HARD_MODE';\nexport const START_GAME = 'START_GAME';\nexport const CREATE_GRID = 'CREATE_GRID';\nexport const CHOOSE_RANDOM_ELEMENT = 'CHOOSE_RANDOM_ELEMENT';\nexport const CHANGE_COLOR_TO_GREEN = 'CHANGE_COLOR_TO_GREEN';\nexport const CHANGE_COLOR_TO_RED = 'CHANGE_COLOR_TO_RED';\nexport const PLAYER_SCORE = 'PLAYER_SCORE';\nexport const COMPUTER_SCORE = 'COMPUTER_SCORE';\nexport const PLAYER_WINS = 'PLAYER_WINS';\nexport const COMPUTER_WINS = 'COMPUTER_WINS';\nexport const NO_WINNER = 'NO_WINNER';\nexport const GET_WINNERS = 'GET_WINNERS';\n\nexport const setSettings = (mode) => {\n    return async (dispatch, getState) => {\n        await dispatch(setMode(mode))\n        const {sideSize} = getState().settings;\n        await dispatch(createArray(sideSize))\n    }\n};\n\nexport const setPlayerName = (name) => {\n    return {\n        type: SET_PLAYER_NAME,\n        payload: name\n    }\n};\n\nexport const setMode = (mode) => {\n    if (mode==='easy Mode') {\n        return {\n            type: SET_EASY_MODE,\n            payload: {\n                mode: 'easy Mode',\n                sideSize: 5,\n                delay: 2000,\n            }\n        }\n    } else if (mode==='normal Mode') {\n        return {\n            type: SET_NORMAL_MODE,\n            payload: {\n                mode: 'normal Mode',\n                sideSize: 10,\n                delay: 1000,\n            }\n        }\n    } else if (mode==='hard Mode') {\n        return {\n            type: SET_HARD_MODE,\n            payload: {\n                mode: 'hard Mode',\n                sideSize: 15,\n                delay: 900,\n            }\n        }\n    }\n};\n\nexport const runGame = () => {\n    return async (dispatch, getState) => {\n        await dispatch(startGame())\n        const {array, chosenElements} = getState().game;\n        await dispatch(chooseRandom(array, chosenElements))\n    }\n};\n\nexport const startGame = () => {\n    return {\n        type: START_GAME,\n    }\n};\n\nexport const createArray = (gridSide) => {\n    let newArray = []\n    while (newArray.length<gridSide*gridSide) {\n        newArray.push(\"white\")\n    }\n    return {\n        type: CREATE_GRID,\n        array: newArray\n    }\n}\n\nexport const chooseRandom = (array, chosenElements) => {\n    let elementId = Math.floor(Math.random() * array.length);\n    if (chosenElements.includes(elementId)){\n        return (dispatch)=>{\n            dispatch(chooseRandom(array, chosenElements))\n\n        }\n    } else {\n        return {\n            type: CHOOSE_RANDOM_ELEMENT,\n            elementId: elementId\n        }\n    }\n}\n\nexport const submitColorChange = (color) => {\n    return async (dispatch, getState) => {\n        const {name} = getState().settings;\n        await dispatch(changeBlockColor(color))\n        await dispatch(calculateScore(color))\n        const {playerScore, computerScore, array, chosenElements} = getState().game;\n        await dispatch(checkWinner(playerScore, computerScore, array, name))\n        const {winner} = getState().game;\n        if (!winner){\n            await dispatch(chooseRandom(array, chosenElements))\n        }\n    }\n}\n\nexport const changeBlockColor = (color, elementId) => {\n    if (color===\"green\"){\n        return {\n            type: CHANGE_COLOR_TO_GREEN,\n            color: color\n        }\n    } else if (color===\"red\"){\n        return {\n            type: CHANGE_COLOR_TO_RED,\n            color: color\n        }\n    }\n};\n\nexport const calculateScore = (color) => {\n    if (color===\"green\"){\n        return {\n            type: PLAYER_SCORE\n        }\n    } else if (color===\"red\"){\n        return {\n            type: COMPUTER_SCORE\n        }\n    }\n}\n\nexport const checkWinner = (playerScore, computerScore, array, name) => {\n    if (playerScore>=(Math.ceil(array.length/2))){\n        let today = new Date();\n        let time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n        let date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n        return {\n            type: PLAYER_WINS,\n            winner: {name: name, date: date, time: time}\n        }\n    } else if (computerScore>=(Math.ceil(array.length/2))){\n        return {\n            type: COMPUTER_WINS\n        }\n    } else return {\n        type: NO_WINNER\n    }\n}\n\nexport const loadState = () => {\n    try {\n        const winners = localStorage.getItem('winners');\n        if (winners === null) {\n            return undefined;\n        }\n        console.log(\"s\")\n        return JSON.parse(winners);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = (winners) => {\n    try {\n        const winnersList = JSON.stringify(winners);\n        localStorage.setItem('winners', winnersList);\n    } catch {\n        return null\n    }\n};\n"]},"metadata":{},"sourceType":"module"}