{"ast":null,"code":"export const SET_EASY_MODE = 'SET_EASY_MODE';\nexport const SET_NORMAL_MODE = 'SET_NORMAL_MODE';\nexport const SET_HARD_MODE = 'SET_HARD_MODE';\nexport const RUN_GAME = 'RUN_GAME';\nexport const CREATE_GRID = 'CREATE_GRID'; // export const CHANGE_GRID = 'CHANGE_GRID';\n\nexport const CHOOSE_RANDOM_ELEMENT = 'CHOOSE_RANDOM_ELEMENT';\nexport const CHANGE_COLOR_TO_GREEN = 'CHANGE_COLOR_TO_GREEN';\nexport const CHANGE_COLOR_TO_RED = 'CHANGE_COLOR_TO_RED';\nexport const PLAYER_SCORE = 'PLAYER_SCORE';\nexport const COMPUTER_SCORE = 'COMPUTER_SCORE';\nexport const PLAYER_WINS = 'PLAYER_WINS';\nexport const COMPUTER_WINS = 'COMPUTER_WINS';\nexport const setSettings = mode => {\n  return (dispatch, getState) => {\n    const {\n      gridSide\n    } = getState().settings;\n    dispatch(setMode(mode));\n    dispatch(createArray(gridSide));\n  };\n};\nexport const setMode = mode => {\n  if (mode === 'easyMode') {\n    return {\n      type: SET_EASY_MODE,\n      payload: {\n        sideSize: 5,\n        delay: 2000\n      }\n    };\n  } else if (mode === 'normalMode') {\n    return {\n      type: SET_NORMAL_MODE,\n      payload: {\n        sideSize: 10,\n        delay: 1000\n      }\n    };\n  } else return {\n    type: SET_HARD_MODE,\n    payload: {\n      sideSize: 15,\n      delay: 900\n    }\n  };\n};\nexport const runGame = () => {\n  return {\n    type: RUN_GAME\n  };\n}; // export const changeGrid = () => {\n//     return {\n//         type: CHANGE_GRID,\n//     }\n// };\n\nexport const createArray = gridSide => {\n  const newArray = [];\n\n  while (newArray.length < gridSide * gridSide) {\n    newArray.push(\"white\");\n  }\n\n  return {\n    type: CREATE_GRID,\n    array: newArray\n  };\n};\nexport const chooseRandom = (array, chosen) => {\n  let elementId = Math.floor(Math.random() * array.length);\n\n  if (chosen.includes(elementId)) {\n    chooseRandom();\n  } else {\n    return {\n      type: CHOOSE_RANDOM_ELEMENT,\n      elementId: elementId\n    };\n  }\n};\nexport const submitColorChange = color => {\n  return (dispatch, getState) => {\n    const {\n      playerScore,\n      computerScore,\n      array\n    } = getState().game;\n    dispatch(changeBlockColor(color));\n    dispatch(calculateScore(color));\n    dispatch(checkWinner(playerScore, computerScore, array));\n  };\n};\nexport const changeBlockColor = (color, elementId) => {\n  if (color === \"green\") {\n    return {\n      type: CHANGE_COLOR_TO_GREEN,\n      color: color\n    };\n  } else if (color === \"red\") {\n    return {\n      type: CHANGE_COLOR_TO_RED,\n      color: color\n    };\n  }\n};\nexport const calculateScore = color => {\n  if (color === \"green\") {\n    return {\n      type: PLAYER_SCORE\n    };\n  } else if (color === \"red\") {\n    return {\n      type: COMPUTER_SCORE\n    };\n  }\n};\nexport const checkWinner = (playerScore, computerScore, array) => {\n  if (playerScore >= Math.ceil(array.length / 2)) {\n    return {\n      type: PLAYER_WINS\n    };\n  } else if (computerScore >= Math.ceil(array.length / 2)) {\n    return {\n      type: COMPUTER_WINS\n    };\n  }\n};","map":{"version":3,"sources":["/Users/zoyamilovanova/WebstormProjects/clickGame/src/redux/actions/index.js"],"names":["SET_EASY_MODE","SET_NORMAL_MODE","SET_HARD_MODE","RUN_GAME","CREATE_GRID","CHOOSE_RANDOM_ELEMENT","CHANGE_COLOR_TO_GREEN","CHANGE_COLOR_TO_RED","PLAYER_SCORE","COMPUTER_SCORE","PLAYER_WINS","COMPUTER_WINS","setSettings","mode","dispatch","getState","gridSide","settings","setMode","createArray","type","payload","sideSize","delay","runGame","newArray","length","push","array","chooseRandom","chosen","elementId","Math","floor","random","includes","submitColorChange","color","playerScore","computerScore","game","changeBlockColor","calculateScore","checkWinner","ceil"],"mappings":"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","sourcesContent":["export const SET_EASY_MODE = 'SET_EASY_MODE';\nexport const SET_NORMAL_MODE = 'SET_NORMAL_MODE';\nexport const SET_HARD_MODE = 'SET_HARD_MODE';\nexport const RUN_GAME = 'RUN_GAME';\nexport const CREATE_GRID = 'CREATE_GRID';\n// export const CHANGE_GRID = 'CHANGE_GRID';\nexport const CHOOSE_RANDOM_ELEMENT = 'CHOOSE_RANDOM_ELEMENT';\nexport const CHANGE_COLOR_TO_GREEN = 'CHANGE_COLOR_TO_GREEN';\nexport const CHANGE_COLOR_TO_RED = 'CHANGE_COLOR_TO_RED';\nexport const PLAYER_SCORE = 'PLAYER_SCORE';\nexport const COMPUTER_SCORE = 'COMPUTER_SCORE';\nexport const PLAYER_WINS = 'PLAYER_WINS';\nexport const COMPUTER_WINS = 'COMPUTER_WINS';\n\nexport const setSettings = (mode) => {\n    return (dispatch, getState) => {\n        const {gridSide} = getState().settings;\n        dispatch(setMode(mode))\n        dispatch(createArray(gridSide))\n    }\n};\n\nexport const setMode = (mode) => {\n    if (mode==='easyMode') {\n        return {\n            type: SET_EASY_MODE,\n            payload: {\n                sideSize: 5,\n                delay: 2000,\n            }\n        }\n    } else if (mode==='normalMode') {\n        return {\n            type: SET_NORMAL_MODE,\n            payload: {\n                sideSize: 10,\n                delay: 1000,\n            }\n        }\n    } else return {\n        type: SET_HARD_MODE,\n        payload: {\n            sideSize: 15,\n            delay: 900,\n        }\n    }\n};\n\nexport const runGame = () => {\n    return {\n        type: RUN_GAME,\n    }\n};\n\n// export const changeGrid = () => {\n//     return {\n//         type: CHANGE_GRID,\n//     }\n// };\n\nexport const createArray = (gridSide) => {\n    const newArray = []\n    while (newArray.length<gridSide*gridSide) {\n        newArray.push(\"white\")\n    }\n    return {\n        type: CREATE_GRID,\n        array: newArray\n    }\n}\n\nexport const chooseRandom = (array, chosen) => {\n    let elementId = Math.floor(Math.random() * array.length);\n    if (chosen.includes(elementId)){\n        chooseRandom()\n    } else {\n        return {\n            type: CHOOSE_RANDOM_ELEMENT,\n            elementId: elementId\n        }\n    }\n}\n\nexport const submitColorChange = (color) => {\n    return (dispatch, getState) => {\n        const {playerScore, computerScore, array} = getState().game;\n        dispatch(changeBlockColor(color))\n        dispatch(calculateScore(color))\n        dispatch(checkWinner(playerScore, computerScore,array))\n    }\n}\n\nexport const changeBlockColor = (color, elementId) => {\n    if (color===\"green\"){\n        return {\n            type: CHANGE_COLOR_TO_GREEN,\n            color: color\n        }\n    } else if (color===\"red\"){\n        return {\n            type: CHANGE_COLOR_TO_RED,\n            color: color\n        }\n    }\n};\n\nexport const calculateScore = (color) => {\n    if (color===\"green\"){\n        return {\n            type: PLAYER_SCORE\n        }\n    } else if (color===\"red\"){\n        return {\n            type: COMPUTER_SCORE\n        }\n    }\n}\n\nexport const checkWinner = (playerScore, computerScore, array) => {\n    if (playerScore>=(Math.ceil(array.length/2))){\n        return {\n            type: PLAYER_WINS\n        }\n    } else if (computerScore>=(Math.ceil(array.length/2))){\n        return {\n            type: COMPUTER_WINS\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}