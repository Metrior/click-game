{"ast":null,"code":"import { CHANGE_COLOR_TO_GREEN, CHANGE_COLOR_TO_RED, CHOOSE_RANDOM_ELEMENT, COMPUTER_SCORE, COMPUTER_WINS, CREATE_GRID, PLAYER_SCORE, PLAYER_WINS, START_GAME } from \"../actions\";\nconst initialSettingsState = {\n  runGame: false,\n  elementId: null,\n  chosenElements: [],\n  array: null,\n  playerScore: 0,\n  computerScore: 0,\n  winner: null,\n  winnersList: []\n};\n\nconst game = (state = initialSettingsState, action) => {\n  switch (action.type) {\n    case START_GAME:\n      return { ...state,\n        runGame: true\n      };\n\n    case CREATE_GRID:\n      return { ...state,\n        array: action.payload.array\n      };\n\n    case CHOOSE_RANDOM_ELEMENT:\n      return { ...state,\n        chosenElements: state.chosenElements.push(action.payload),\n        array: state.array.map(element => element.id === action.payload ? \"blue\" : element),\n        elementId: action.payload\n      };\n\n    case CHANGE_COLOR_TO_GREEN:\n      return { ...state,\n        array: state.array.map(element => element.id === state.elementId ? \"green\" : element)\n      };\n\n    case CHANGE_COLOR_TO_RED:\n      return { ...state,\n        array: state.array.map(element => element.id === state.elementId ? \"red\" : element)\n      };\n\n    case PLAYER_SCORE:\n      return { ...state,\n        playerScore: state.playerScore + 1\n      };\n\n    case COMPUTER_SCORE:\n      return { ...state,\n        computerScore: state.computerScore + 1\n      };\n\n    case PLAYER_WINS:\n      return { ...state,\n        winner: \"player\",\n        winnersList: state.winnersList.push(),\n        runGame: false,\n        array: state.array.map(() => \"white\")\n      };\n\n    case COMPUTER_WINS:\n      return { ...state,\n        winner: \"computer\",\n        runGame: false,\n        array: state.array.map(() => \"white\")\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default game;","map":{"version":3,"sources":["/Users/zoyamilovanova/WebstormProjects/clickGame/src/redux/reducers/game.js"],"names":["CHANGE_COLOR_TO_GREEN","CHANGE_COLOR_TO_RED","CHOOSE_RANDOM_ELEMENT","COMPUTER_SCORE","COMPUTER_WINS","CREATE_GRID","PLAYER_SCORE","PLAYER_WINS","START_GAME","initialSettingsState","runGame","elementId","chosenElements","array","playerScore","computerScore","winner","winnersList","game","state","action","type","payload","push","map","element","id"],"mappings":"AAAA,SACIA,qBADJ,EAEIC,mBAFJ,EAGIC,qBAHJ,EAIIC,cAJJ,EAKIC,aALJ,EAMIC,WANJ,EAOIC,YAPJ,EAQIC,WARJ,EASIC,UATJ,QAUO,YAVP;AAYA,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,OAAO,EAAE,KADgB;AAEzBC,EAAAA,SAAS,EAAE,IAFc;AAGzBC,EAAAA,cAAc,EAAE,EAHS;AAIzBC,EAAAA,KAAK,EAAE,IAJkB;AAKzBC,EAAAA,WAAW,EAAE,CALY;AAMzBC,EAAAA,aAAa,EAAE,CANU;AAOzBC,EAAAA,MAAM,EAAE,IAPiB;AAQzBC,EAAAA,WAAW,EAAE;AARY,CAA7B;;AAWA,MAAMC,IAAI,GAAG,CAACC,KAAK,GAAGV,oBAAT,EAA+BW,MAA/B,KAA0C;AACnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,UAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHT,QAAAA,OAAO,EAAE;AAFN,OAAP;;AAIJ,SAAKL,WAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHN,QAAAA,KAAK,EAAEO,MAAM,CAACE,OAAP,CAAeT;AAFnB,OAAP;;AAIJ,SAAKX,qBAAL;AACI,aAAO,EACH,GAAGiB,KADA;AAEHP,QAAAA,cAAc,EAAEO,KAAK,CAACP,cAAN,CAAqBW,IAArB,CAA0BH,MAAM,CAACE,OAAjC,CAFb;AAGHT,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYW,GAAZ,CAAgBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OAAtB,GAC9B,MAD8B,GAE9BG,OAFG,CAHJ;AAOHd,QAAAA,SAAS,EAAES,MAAM,CAACE;AAPf,OAAP;;AASJ,SAAKtB,qBAAL;AACI,aAAO,EACH,GAAGmB,KADA;AAEHN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYW,GAAZ,CAAgBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,KAAK,CAACR,SAArB,GAC9B,OAD8B,GAE9Bc,OAFG;AAFJ,OAAP;;AAOJ,SAAKxB,mBAAL;AACI,aAAO,EACH,GAAGkB,KADA;AAEHN,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYW,GAAZ,CAAgBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,KAAK,CAACR,SAArB,GAC9B,KAD8B,GAE9Bc,OAFG;AAFJ,OAAP;;AAOJ,SAAKnB,YAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHL,QAAAA,WAAW,EAAEK,KAAK,CAACL,WAAN,GAAkB;AAF5B,OAAP;;AAIJ,SAAKX,cAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHJ,QAAAA,aAAa,EAAEI,KAAK,CAACJ,aAAN,GAAoB;AAFhC,OAAP;;AAIJ,SAAKR,WAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHH,QAAAA,MAAM,EAAE,QAFL;AAGHC,QAAAA,WAAW,EAAEE,KAAK,CAACF,WAAN,CAAkBM,IAAlB,EAHV;AAIHb,QAAAA,OAAO,EAAE,KAJN;AAKHG,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYW,GAAZ,CAAgB,MAAM,OAAtB;AALJ,OAAP;;AAOJ,SAAKpB,aAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHH,QAAAA,MAAM,EAAE,UAFL;AAGHN,QAAAA,OAAO,EAAE,KAHN;AAIHG,QAAAA,KAAK,EAAEM,KAAK,CAACN,KAAN,CAAYW,GAAZ,CAAgB,MAAM,OAAtB;AAJJ,OAAP;;AAMJ;AACI,aAAOL,KAAP;AA/DR;AAiEH,CAlED;;AAsEA,eAAeD,IAAf","sourcesContent":["import {\n    CHANGE_COLOR_TO_GREEN,\n    CHANGE_COLOR_TO_RED,\n    CHOOSE_RANDOM_ELEMENT,\n    COMPUTER_SCORE,\n    COMPUTER_WINS,\n    CREATE_GRID,\n    PLAYER_SCORE,\n    PLAYER_WINS,\n    START_GAME\n} from \"../actions\";\n\nconst initialSettingsState = {\n    runGame: false,\n    elementId: null,\n    chosenElements: [],\n    array: null,\n    playerScore: 0,\n    computerScore: 0,\n    winner: null,\n    winnersList: []\n};\n\nconst game = (state = initialSettingsState, action) => {\n    switch (action.type) {\n        case START_GAME:\n            return {\n                ...state,\n                runGame: true\n            };\n        case CREATE_GRID:\n            return {\n                ...state,\n                array: action.payload.array\n            }\n        case CHOOSE_RANDOM_ELEMENT:\n            return {\n                ...state,\n                chosenElements: state.chosenElements.push(action.payload),\n                array: state.array.map(element => element.id === action.payload ?\n                    \"blue\" :\n                    element\n                ),\n                elementId: action.payload\n            }\n        case CHANGE_COLOR_TO_GREEN:\n            return {\n                ...state,\n                array: state.array.map(element => element.id === state.elementId ?\n                    \"green\" :\n                    element\n                )\n            }\n        case CHANGE_COLOR_TO_RED:\n            return {\n                ...state,\n                array: state.array.map(element => element.id === state.elementId ?\n                    \"red\" :\n                    element\n                )\n            }\n        case PLAYER_SCORE:\n            return {\n                ...state,\n                playerScore: state.playerScore+1\n            }\n        case COMPUTER_SCORE:\n            return {\n                ...state,\n                computerScore: state.computerScore+1\n            }\n        case PLAYER_WINS:\n            return {\n                ...state,\n                winner: \"player\",\n                winnersList: state.winnersList.push(),\n                runGame: false,\n                array: state.array.map(() => \"white\")\n            }\n        case COMPUTER_WINS:\n            return {\n                ...state,\n                winner: \"computer\",\n                runGame: false,\n                array: state.array.map(() => \"white\")\n            }\n        default:\n            return state\n    }\n};\n\n\n\nexport default game;\n"]},"metadata":{},"sourceType":"module"}